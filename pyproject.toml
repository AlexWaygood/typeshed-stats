[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "typeshed_stats"
dynamic = ["version"]
authors = [{ name = "Alex Waygood", email = "alex.waygood@gmail.com" }]
description = "Library and command-line tool to gather stats on typeshed packages"
license = { text = "MIT" }
readme = "README.md"
requires-python = ">=3.11"
keywords = ["typeshed", "typing", "stubs"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Software Development",
    "Typing :: Typed",
]
dependencies = [
    "attrs>=22.2.0",
    "cattrs",
    "aiohttp[speedups]>=3.9.0",
    "packaging",
    "pathspec>=0.10.3",         # needs to be py.typed
    "Jinja2>=3",
]

[project.urls]
"Homepage" = "https://github.com/AlexWaygood/typeshed-stats"
"Bug Tracker" = "https://github.com/AlexWaygood/typeshed-stats/issues"

[project.scripts]
typeshed-stats = "typeshed_stats._cli:main"

[project.optional-dependencies]
rich = ["rich", "rich-argparse>=1"]

[dependency-groups]
dev = [
    "typeshed-stats[rich]",
    "MarkDown==3.8",
    "mkdocs==1.6.1",
    "mkdocs-macros-plugin==1.3.7",
    "mkdocs-material==9.6.14",
    "mkdocstrings==0.29.1",
    "mkdocstrings-python==1.16.11",
    "beautifulsoup4>=4,<5",
    "covdefaults==2.3.0",
    "coverage==7.8.2",
    "Markdown>=3,<4",
    "pyright==1.1.401",
    "pytest==8.3.5",
    "pytest-antilru==2.0.0",
    "pytest-asyncio==1.0.0",
    "pytest-dependency==0.6.0",
    "pytest-mock==3.14.1",
    "pytest-subtests==0.14.1",
    "mypy==1.16.0",
    "types-beautifulsoup4==4.12.0.20250516",
    "types-Markdown==3.8.0.20250415",
]

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/typeshed_stats/_version.py"

[tool.ruff]
fix = true
preview = true
line-length = 88

[tool.ruff.format]
docstring-code-format = true
skip-magic-trailing-comma = true

[tool.ruff.lint]
select = [
    "ARG",
    "B",
    "B9",
    "D",
    "E",
    "EXE",
    "F",
    "I",
    "ISC",
    "PGH",
    "PYI",
    "PT",
    "RUF",
    "SIM",
    "UP",
    # a somewhat random selection of rules that highlighted real issues
    # when I ran `uvx ruff --select=ALL` and did not have any false positives
    "PLW0127",
    "FURB101",
    "FURB103",
    "PLW1510",
]
ignore = [
    # These are all enforced by, or incompatible with, the ruff formatter:
    "E203",
    "E501",
    "W291",
    "W293",
    # It's often necessary to compare types instead of using isinstance();
    # on this code base, this check has 0 true positives and many false positives:
    "E721",
    "RUF005",
    # Let mypy/pyright complain about blanket type ignores or implicit optional
    "PGH004",
    "RUF013",
    # Makes code slower and more verbose
    # https://github.com/astral-sh/ruff/issues/7871
    "UP038",
]
unfixable = [
    "F841",    # unused variable. ruff keeps the call, but mostly we want to get rid of it all
    "F601",    # automatic fix might obscure issue
    "F602",    # automatic fix might obscure issue
    "B018",    # automatic fix might obscure issue
    "PLW1510", # automatic fix might obscure issue
    "RUF017",  # Ruff's fix is faster, but I prefer using itertools.chain_from_iterable
]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
    "D", # Don't need docstrings in test methods
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
combine-as-imports = true
split-on-trailing-comma = false

[tool.codespell]
ignore-words-list = ["corus"]

[tool.mypy]
files = ['website_macros.py', 'src', 'tests', 'scripts']
show_traceback = true
pretty = true
strict = true
enable_error_code = 'ignore-without-code,redundant-expr,possibly-undefined'
warn_unreachable = true
local_partial_types = true
allow_redefinition = true

[tool.pyright]
include = ["."]
venv = ".venv"
pythonVersion = "3.11"
typeCheckingMode = "strict"

# Extra strict settings
reportMissingModuleSource = "error"
reportShadowedImports = "error"
reportCallInDefaultInitializer = "error"
reportUnnecessaryTypeIgnoreComment = "error"

# Leave "type: ignore" comments to mypy
enableTypeIgnoreComments = false

# Runtime libraries used are not all py.typed
useLibraryCodeForTypes = true

# Overly strict settings with false positives
reportMissingSuperCall = "none"
reportImplicitStringConcatenation = "none"
reportUninitializedInstanceVariable = false

# Already flagged by mypy
reportMissingTypeStubs = "none"

# Extremely strict settings that result in lots of pyright: ignores everywhere
reportUnknownVariableType = false
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportUnknownLambdaType = false
reportUnnecessaryIsInstance = false

[tool.pytest.ini_options]
testpaths = ["src", "tests"]
addopts = "--strict-config --strict-markers"
xfail_strict = true
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
markers = ["requires_network"]
filterwarnings = [
    "error",
    # Ignore ResourceWarnings about unclosed sockets
    'ignore:Exception ignored in:pytest.PytestUnraisableExceptionWarning',
    #
    # The following are only issues on Python 3.14+
    #
    # SyntaxWarning from pluggy._callers
    '''ignore::SyntaxWarning:pluggy._callers''',
    # DeprecationWarning from cattrs
    '''ignore:'_UnionGenericAlias' is deprecated:DeprecationWarning''',
]

[tool.coverage.run]
# Note that many settings are automatically added due to this plugin
plugins = ["covdefaults"]
source = ["src/typeshed_stats", "tests"]

[tool.coverage.report]
# This extends the lines that covdefaults already excludes
exclude_lines = ['^if typing.TYPE_CHECKING:$']

[tool.coverage.covdefaults]
subtract_omit = "*/__main__.py"
